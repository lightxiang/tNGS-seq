/*
 * -------------------------------------------------
 *  sagene-plugins/rpdseq-reborn 流程配置文件
 * -------------------------------------------------
 */

// 全局参数
params {
  data = false
  add = false
  length_required = 75
  reads_to_process = 0
  pe = false
  lims = 0.95
  match = 90
  libprepkit = 'auto'

  // Options: Alignment algorithms
  algorithm = 'bwa-mem'

  // Options: LRM
  lrmconf = false

  // Options: Other options
  input = false
  samples = false
  outdir = false // 单运行实例的所有结果输出根目录，outdir必须被赋值
// intermediate = ${params.outdir}/Intermediate 中间结果输出目录
// results = ${params.outdir}/Results 展示结果输出目录
  tracedir = './RunInfo' // 运行信息输出目录
  help = false

  // Options: AWSBatch
  awsqueue = 'sgqueue'
  awsregion = 'cn-north-1'

  // Defaults only, with func check_max, expecting to be overwritten
  max_memory = 96.GB
  max_cpus = 40
  max_time = 6.h

}

// 载入基础运行环境配置
includeConfig 'conf/base.config'

// 载入高级运行环境配置
profiles {
  cloud { includeConfig 'conf/awsbatch.config' }
  lrm { process.executor = 'local' }
  slurm { process.executor = 'slurm' }
  conda { process.conda = "$baseDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker { docker.enabled = true; docker.remove = true; docker.runOptions = "-u \$(id -u):\$(id -g)" }
  test { includeConfig 'conf/test.config' }
}

// 载入数据库配置
includeConfig 'conf/database.config'

// *************************
// *** 以下部分请勿手动修改 ***
// *************************

// 流程监控配置
timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = false
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = false
  file = "${params.tracedir}/pipeline_dag.svg"
}

// Docker镜像
// * 开发版请使用x.y[dev,rc1,rc2,alpha,beta]
// * 稳定版请使用x.y
process.container = '878219578887.dkr.ecr.cn-north-1.amazonaws.com.cn/rpdseq-reborn:1.0.5'

// 流程基础信息
manifest {
  name = 'sagene-plugins/rpdseq-reborn'
  author = 'sagene'
  homePage = 'http://git.sagene.com.cn/sagene-plugins/rpdseq-reborn'
  description = 'rpdseq-reborn'
  mainScript = 'main.nf'
  nextflowVersion = '>=19.10.0'
  version = '1.0.5'
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
